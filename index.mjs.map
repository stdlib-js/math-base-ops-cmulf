{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport real from '@stdlib/complex-real' ;\nimport imag from '@stdlib/complex-imag' ;\n\n\n// MAIN //\n\n/**\n* Multiplies two single-precision complex floating-point numbers.\n*\n* @param {Complex64} z1 - complex number\n* @param {Complex64} z2 - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32' ;\n* import real from '@stdlib/complex-real' ;\n* import imag from '@stdlib/complex-imag' ;\n*\n* var z1 = new Complex64( 5.0, 3.0 );\n* // returns <Complex64>\n*\n* var z2 = new Complex64( -2.0, 1.0 );\n* // returns <Complex64>\n*\n* var out = cmulf( z1, z2 );\n* // returns <Complex64>\n*\n* var re = real( out );\n* // returns -13.0\n*\n* var im = imag( out );\n* // returns -1.0\n*/\nfunction cmulf( z1, z2 ) {\n\tvar re1 = real( z1 );\n\tvar re2 = real( z2 );\n\tvar im1 = imag( z1 );\n\tvar im2 = imag( z2 );\n\tvar re = float64ToFloat32(re1*re2) - float64ToFloat32(im1*im2);\n\tvar im = float64ToFloat32(re1*im2) + float64ToFloat32(im1*re2);\n\treturn new z1.constructor( float64ToFloat32( re ), float64ToFloat32( im ) );\n}\n\n\n// EXPORTS //\n\nexport default cmulf;\n"],"names":["cmulf","z1","z2","re1","real","re2","im1","imag","im2","re","float64ToFloat32","im","constructor"],"mappings":";;kQAwDA,SAASA,EAAOC,EAAIC,GACnB,IAAIC,EAAMC,EAAMH,GACZI,EAAMD,EAAMF,GACZI,EAAMC,EAAMN,GACZO,EAAMD,EAAML,GACZO,EAAKC,EAAiBP,EAAIE,GAAOK,EAAiBJ,EAAIE,GACtDG,EAAKD,EAAiBP,EAAIK,GAAOE,EAAiBJ,EAAID,GAC1D,OAAO,IAAIJ,EAAGW,YAAaF,EAAkBD,GAAMC,EAAkBC"}